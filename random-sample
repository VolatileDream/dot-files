#!/usr/bin/env python3

from argparse import ArgumentParser
from random import Random
import math
import sys

def args():
  p = ArgumentParser()
  p.add_argument("-s", "--size", type=int, default=1000,
                 help="Size of the sample.")
  p.add_argument("-S", "--seed", default=None, help="Random seed.")

  return p.parse_args()


# An implementation of randomized resevoir sampling:
# https://en.wikipedia.org/wiki/Reservoir_sampling
#
# Specifically that from:
# "Reservoir-Sampling Algorithms of Time Complexity O(n(1+log(N/n)))"
# By Kim-Hung Li.
#
# Time complexity ends up being O(size * (1 + log(N / size)))
def resevoir_sample(r, size, iterable):
  source = iter(iterable)

  # if the source has fewer than size items we populate with None.
  # this is the only step where we have to be able to get items from
  # the iterable.
  values = [None] * size
  for i in range(size):
    values[i] = next(source, None)

  W = math.exp(math.log(r.random()) / size)

  try:
    while True:
      skip = int(math.log(r.random()) / math.log(1 - W))
      #print("skipping:", skip)
      for i in range(skip):
        next(source)

      W *= math.exp(math.log(r.random()) / size)

      n = next(source)
      replace = int(r.uniform(0, size))
      values[replace] = n

  except StopIteration:
    # fall through to exiting.
    pass

  return values

if __name__ == "__main__":
  args = args()

  items = resevoir_sample(Random(args.seed), args.size, sys.stdin)

  for item in items:
    if item is None:
      break

    sys.stdout.write(item)
