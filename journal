#!/bin/bash

# configuration file
CONFIG="$HOME/.config/journal2-config.ini"

config(){
	if [ $# -eq 0 ]; then
		if [ -e "$CONFIG" ]; then
			cat "$CONFIG"
		fi
	else
		# get the value we wanted, and substitute
		# any $HOME value with the environment variable
		VAR="$(ini "$CONFIG" "$@" | sed "s_\${HOME}_${HOME}_" )"
		conch 'journal config' "$VAR"
	fi
}

# stuff that should be in configs
JOURNAL="$(config journal file)" 	# file for for archivist

err(){
	echo -ne "\e[31m"
	echo $@ >> /dev/stderr
	echo -ne "\e[0m"
}

require-journal(){
	if [ -z "$JOURNAL" ]; then
		err "journal hasn't been configured for use yet."
		err "Run: 'journal create' to configure it."
		exit 1
	fi
	if [ ! -f "$JOURNAL" ]; then
		err "Unable to locate journal (${JOURNAL})."
		err "Are you sure it exists?"
		exit 1
	fi
}

# takes the date-time as arg1
temp-file(){
	# no spaces or slashes in file name.
	mktemp --tmpdir=/tmp "XXXXXXXX--$(echo $1 | tr '/ ' '--')"
}

query(){
	require-journal
	QUERY_PREFIX="$(config journal bin)/$(config journal source-prefix)"
	if [ $# -lt 1 ]; then
		err "query requires a data source and query be specified"
		SOURCES=$(ls "${QUERY_PREFIX}"* 2> /dev/null | sed "s_${QUERY_PREFIX}__")
		err "Valid sources are: $SOURCES"
		exit 1
	fi

	SRC="$1" ; shift
	COM="${QUERY_PREFIX}${SRC}"
	if [ -e "$COM" ]; then
		if [ -x "$COM" ]; then
			# pass the query along
			"$COM" --query "$@"
		else
			err "Cannot query data source '$SRC': ${QUERY_PREFIX}${SRC} is not executable"
			exit 1
		fi
	else
		err "Cannot query data source '$SRC': could not find ${QUERY_PREFIX}${SRC}"
		exit 1
	fi
}

build(){
	require-journal
	# Args are laid out in 2 groups:
	#  pass along flags
	# --
	#  sources
	ARGS=""
	BUILD_PREFIX="$(config journal bin)/$(config journal source-prefix)"
	while [ $# -gt 0 ]; do
		last_arg="$1" ; shift
		if [ "$last_arg" = "--" ]; then
			break
		fi
		ARGS="$ARGS $last_arg"
	done

	if [ $# -gt 0 ]; then
		SOURCES="$@"
	else
		SOURCES=$(ls "${BUILD_PREFIX}"* 2> /dev/null | sed "s_${BUILD_PREFIX}__")

		if [ $? -ne 0 -o -z "$SOURCES" ]; then
			# nothing to build
			return
		fi
		echo -n "Building sources: $SOURCES" | tr '\n' ' '
		echo
	fi

	for SRC in $SOURCES ; do
		COM="${BUILD_PREFIX}${SRC}"
		if [ -e "$COM" ]; then
			if [ -x "$COM" ]; then
				mkdir -p "$(config journal generated)"
				"$COM" $ARGS
			fi
		else
			err "Unable to build $SRC: could not find ${BUILD_PREFIX}${SRC}"
		fi
	done
}

update(){
	require-journal
	FORMAT="%Y-%m-%d"
	LAST="$(archivist -a "$JOURNAL" date)"

	# unfortunately we have to know a bit about archivists' date format
	LAST_ENTRY_DATE="`date --date="$(echo $LAST | sed 's/ .*//')" +$FORMAT `"
	NOW="$(date +$FORMAT)"
	
	if [ "$NOW" != "$LAST_ENTRY_DATE" ]; then

		# Update, creating a new latest file
		echo | archivist -a "$JOURNAL" submit

		# Now run an incremental update
		tmp="$(temp-file "$LAST")"

		archivist -a "$JOURNAL" view "$LAST" > "$tmp"

		build --incremental "$tmp" --

		rm "$tmp"
	fi
	
}

edit(){
	require-journal
	LAST="$(archivist -a "$JOURNAL" date)"

	# unfortunately we're stuck putting this into a temporary file.
	tmp="$(temp-file "$LAST")"
	archivist -a "$JOURNAL" last > "$tmp"

	sensible-editor "$tmp"

	# send it back, this is very important
	cat "$tmp" | archivist -a "$JOURNAL" submit "$LAST"

	rm "$tmp"
}

view(){
	require-journal
	# all entries must be shown with a single command invocation
	# this prevents the user from having to exit the pager
	# again and again and again, and get really frustrated
	if [ ! -z "$*" ]; then
		archivist -a "$JOURNAL" view "$@" | sensible-pager
	fi
}

create(){
	if [ ! -z "$JOURNAL" ]; then
		err "Journal already exists ($JOURNAL)."
		exit 1
	fi
	# the only command that can be run without a journal
	# it bootstraps the rest of the app, and configures
	#  the location of the journal for further use
	echo "Creating a journal..."
	configured=0
	file_location=""
	gen_location=""
	while [ $configured -eq 0 ]; do
		echo "Where should the journal file live?"
		read -p "> " file_location
		echo "Where should generated data files go?"
		read -p "> " gen_location
		echo "Put the journal here: '$file_location'"
		echo " and put the generated files here: '$gen_location'"
		echo "Is that correct?"
		read -p "(y/n) > " confirm
		if [ "$confirm" = "y" -o "$confirm" = "Y" ]; then
			configured=1
		else
			echo "Okay, let's try again."
		fi
	done
	# we set some defaults here, because they just make sense.
	config journal bin "\${HOME}/bin/journal-bin"
	config journal source-prefix "source-"
	# user entered variables
	# the location, modified to use '${HOME}' instead of ~
	file_location="$(echo $file_location | sed 's_^~/_\${HOME}/_')"
	config journal file "$file_location"
	config journal generated "$gen_location"

	# update the journal location so we can run update + edit after this
	JOURNAL="$(config journal file)"
}

# TODO do option parsing here

if [ $# -eq 0 ]; then
	if [ ! -f "$JOURNAL" ]; then
		create
	fi
	# invoke update first
	update
	edit
else
	COMMAND="$1" ; shift
	case $COMMAND in
		build)
			tmp="$(mktemp)"
			archivist -a "$JOURNAL" replay > "$tmp"
			build --full "$tmp" -- "$@"
			rm "$tmp"
			;;
		clean)
			# trust that each source will clean up after itself
			build --clean -- "$@"
			;;
		config)
			config "$@" ;;
		create)
			# setup the journal at the beginning
			create ;;
		edit)
			# the only way to edit yesterdays entry
			edit ;;
		query)
			query "$@" ;;
		search)
			query index "$@" ;;
		update)
			update ;;
		view)
			view "$@" ;;
		help|-h|--help)
			echo "Usage: $0 [options] <command>"
			echo "  Update your private journal"
			echo
			echo "Available commands are:"
			echo "- build [source]*"
			echo "    rebuilds the generated files for the specified sources, defaults"
			echo "    to rebuilding all data sources."
			echo
			echo "- clean [source]*"
			echo "    removes all generated files for the specified sources, defaults"
			echo "    to removing files for all sources"
			echo
			echo "- config <source> <key> [value]"
			echo "    reads or writes the config for the specified source variable."
			echo "    without arguments it dumps the config"
			echo
			echo "- edit"
			echo "    edit the most recent journal entry (default)"
			echo
			echo "- query <source> query*"
			echo "    query the generated data from the specific source"
			echo
			echo "- search query"
			echo "    shortcut for 'query index'"
			echo
			echo "- update"
			echo "    if the LATEST entry is not for the current date it"
			echo "    updates the LATEST entry to point to the current date then"
			echo "    runs an incremental update of all generated data sources"
			echo
			echo "- view [year[smonth[-day[ hour[:minute[:second]]]]]]*"
			echo "    view a particular set of date entries, or range of dates"
			echo
			echo "Building your own source:"
			echo " There is 2 necesarry things a source needs to work with journal."
			echo " - The command must start with 'journal config journal source-prefix'"
			echo " - It must be located in the folder: 'journal config journal bin'"
			echo
			echo "The source must accept a particular flag set:"
			echo " * --full \$file : the source is given the entire journal and must"
			echo "    recreate it's dataset from the source."
			echo " * --clean : the source erases any generated files that are stored"
			echo "    with the journal, is usually preceeded by a --full"
			echo " * --incremental \$file : the source is given a single journal entry,"
			echo "    and must update it's dataset using the entry."
			echo " * --query a1 ... aN : the source is given a query that it must resolve"
			echo "    for the user. The query is passed as is from 'journal query'."
			echo "    The source is responsible for displaying the resultant data."
			;;
		*)
			err "Journal command '$COMMAND' not found"
			exit 1
			;;
	esac
fi

