#!/usr/bin/env bash

# 2 args:
# 1: command (space escaped)
# 2: string to complete

conch::usage(){
	echo "usage: conch <command> <string>"
	echo " Conch is a recursive string completion engine"
	echo
	echo "    command: a command string to execute, with spaces escaped"
	echo "    string: a string containing fields of the form \${a.b.c ... }"
	echo " Conch replaces all the fields with: '<command> a b c ...'"
	echo
	echo " NOTE: Conch requires that none of the fields contain spaces."
	echo
	echo " ex:"
	echo "  > ini file your args"
	echo "  /a/path/that/isnt/complete/\${last.arg}"
	echo
	echo "  > ini file last arg"
	echo "  end/of/path/"
	echo
	echo "  > conch 'ini file' your args"
	echo "  /a/path/that/isnt/complete/end/of/path/"
	echo
	echo "  > conch 'ini file' \"/string/to/fill/in/\${last.arg}/file.extension\""
	echo "  /string/to/fill/in/end/of/path//file.extension"
}

conch::fill(){
	readonly COMMAND="$1" ; shift
	local VAR="$1" ; shift
	readonly INITIAL="$VAR"
	while echo "$VAR" | grep --silent '\$' ; do
		# replace each "${...}" group with it's config value

		# find the first "${...}" group, and then extract the "..."
		local match="$(echo "$VAR" | grep -oE '\${[^}]+}' | head -n 1)"
		local segment="$(echo $match | tr -d '${}' )"

    # Check that exactly 1 dot exists, as we need two args to invoke the user
    # provided configuration tool.
		if [ `echo $segment | grep -c '.'` -ne 1 ]; then
			echo "error: can't fill in config value" > /dev/stderr
      echo  "bad group '$segment' in $INITIAL" > /dev/stderr
			exit 2
		fi

		# split into the parts
		readonly args="$(echo $segment | tr '.' ' ' )"

		# go and fetch the parts
		readonly replace="$(conch::config "$COMMAND" $args)"

		# annoying subshell handling stuff...
		# otherwise the exit value gets swallowed
		readonly EXIT_VAL=$?
		if [ $EXIT_VAL -ne 0 ]; then
			return $EXIT_VAL
		fi

		VAR="$( echo "$VAR" | sed "s_${match}_${replace}_" )"
	done
	echo "$VAR"
}

conch::config(){
	readonly COMMAND="$1" ; shift
	readonly ARGS="$( $COMMAND "$@" )"

	# check if the lookup worked
	readonly EXIT_VAL=$?
	if [ $EXIT_VAL -ne 0 ]; then
		echo "Error looking up '$@'" > /dev/stderr
		exit $EXIT_VAL
	fi

	conch::fill $ARGS
}

conch::main(){
	if [ $# -lt 2 ]; then
		conch::usage > /dev/stderr
		return 1
	fi

  # define the command that is run to fetch the config variables.
	local COMMAND="$1" ; shift

	if [ $# -gt 1 ]; then
		# they're asking for the key, value
		conch::config "$COMMAND" "$@"
	else
		# they're asking for the string to get filled in
		conch::fill "$COMMAND" "$1"
	fi

	return $?
}

if [ "$_" = "$0" ]; then
	# this file wasn't sourced, execute.
	conch::main "$@"
	exit $?
fi
