#!/usr/bin/env python3
#
# To visualize a series of data as bar graph.
#
# Takes data of the form:
#
#   $LABEL : ($SYMBOL $COUNT) *
#
# Such that:
#  * label does not contain ":"
#  * symbol is a length 1 string
#  * count is an string representation of an integer
#   * The sum of every count entry in a row sums to a fixed value (across all rows)
#
# And outputs data like:
#
# $LABEL : ${S1}${S1}${S2}...${SN}
#

import argparse

def args():
    parser = argparse.ArgumentParser(description="plot bar graphs on the command line")
    parser.add_argument("-w", "--width", type=int, default=None, nargs="?",
        help="Render width for the bargraph, defaults to terminal width - 20).")
    parser.add_argument("-s", "--sum", type=int, default=None, nargs="?",
        help="Expected sum of the data in a row, defaults to unset, taking the value of the first row.")

    return parser

import sys

def adjacent(iterable):
    first = None
    for item in iterable:
        if not first:
            first = item
        else:
            yield (first, item)
            first = None


class LineData(object):

    def __init__(self, label, symbol_counts, sum):
        self.label = label
        self.symbol_counts = symbol_counts
        self.sum = sum

    def __repr__(self):
        return "LineData(\"{}\", {}, {})".format(self.label, self.symbol_counts, self.sum)

    @staticmethod
    def parse(line, sum=None):
        label, rest = line.split(" : ")
        split = rest.split()
        translated = []
        acc = 0
        for symbol, count in adjacent(split):
            if len(symbol) > 1:
                raise Exception("Symbol has length longer than 1: {}".format(symbol))
            count = int(count)

            acc += count
            translated.append(symbol)
            translated.append(count)

        if sum and acc != sum:
            raise Exception("Sum of counts ({}) not equal to expected ({})".format(acc, sum))
        return LineData(label, translated, acc)


def plot_data(sum, width, stream, data):
    count_per_char = sum / width
    stream.write(data.label)
    stream.write(" : ")
    sum_out_char = 0
    sum_out_count = 0
    for symbol, count in adjacent(data.symbol_counts):
        length = int(count / count_per_char)
        stream.write(symbol * int(count / count_per_char))

        sum_out_char += length
        sum_out_count += count
        if sum_out_char < int(sum_out_count / count_per_char):
            # to handle cases where the width does not nicely divide the sum
            # occasionally output an extra character as needed.
            sum_out_char += 1
            stream.write(symbol)
    stream.write("\n")


def plot(sum, width):
    with sys.stdin as stream:
        for line in stream:
            line = line.strip()
            data = None
            try:
                data = LineData.parse(line, sum)
                if sum is None:
                    sum = data.sum
            except Exception as e:
                sys.stderr.write("Error with line:\n  '{}'\n".format(line))
                sys.stderr.write(str(e))
                sys.stderr.write("\n")
                raise
            else:
                plot_data(sum, width, sys.stdout, data)


def terminal_width(default_width):
    if default_width is not None:
        return default_width
    import shutil
    return shutil.get_terminal_size()[0] - 20


if __name__ == "__main__":
    parser = args()

    args = parser.parse_args()

    plot(args.sum, terminal_width(args.width))
