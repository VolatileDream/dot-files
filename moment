#!/usr/bin/env python

import datetime
import sys
import re

class TimedCacheSet(object):

	def __init__(self, moment):
		self.content = dict()
		self.moment = moment


	def add(self, item):
		# don't care if the item is in there or not
		self.content[ item ] = datetime.datetime.utcnow()


	def __contains__(self, item):
		now = datetime.datetime.utcnow()

		if item in self.content:

			time = self.content[ item ]
			delta = now - time
			# the item is still in the set
			if delta < self.moment:
				return True

		return False


def parse_timedelta(time_str):
	timep = re.compile("^(\d*)(s|m|h|d|w|y)?$")
	match = timep.match(time_str)
	value, res = match.groups()

	if not value:
		value = 1
	else:
		value = int(value)

	if not res:
		res = "s"

	res_update = {	"y" : ("w", 52),
			"w" : ("d", 7 ),
			"d" : ("h", 24),
			"h" : ("m", 60),
			"m" : ("s", 60),
			"s" : (None, 1) }

	while res:
		next, update = res_update[res]
		value *= update
		res = next

	return datetime.timedelta(0, value, 0)


def main(timedelta):
	delta = parse_timedelta(timedelta)
	cache = TimedCacheSet(delta)

	line = " " # temporary

	while line:

		line = sys.stdin.readline()

		if line not in cache:
			sys.stdout.write(line)

			cache.add(line)

	return


import argparse
def args():
	parse = argparse.ArgumentParser(description=u"a tool to briefly ignore duplicate input")
	parse.add_argument("time_window", default="5s",	nargs="?",
			help="a string that matches '\\d*(s|m|h|d|w|y)?'."
			" The letter indicating the desired time span (seconds,"
			" minutes, hours, days, weeks, years) over which to ignore"
			" duplicate input. Defaults to 5 seconds.")

	return parse


if __name__ == "__main__":
	parse = args()

	cli_args = parse.parse_args()

	main( cli_args.time_window )

