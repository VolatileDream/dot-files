#!/bin/bash

#
#  See what 'read -t' returns on timeout.
#
#  For that - read from stdout. Alternatively, it could read
#  from /dev/zero, but it's not available under Cygwin and
#  in other non-*nix environments.
#
#  Also note, that while bash manual states that the return
#  code on a timeout is greater than 128, it doesn't hold
#  true with a number of bash implementations, most notably
#  including GNU bash that returns 1 instead.
#

cleanup(){
        # make sure to put a newline at the end of output, that
        # way our prompt won't get written on the last timestamp
        print_timeout
        exit
}
trap cleanup SIGINT

#  The latency is required, and invalid FD = bad.
sleep 2 | read -t 1
timeout_status=$?

did_timeout=0
print_timeout(){
        if [ $did_timeout -eq 1 ]; then
                echo
                did_timeout=0
        fi
}

main() {
  local timeout=1

  local c
  while [[ $# -gt 0 ]]; do
    c="$1" ; shift
    case "$c" in
      --timeout|-t) timeout="$1" ; shift ;;
      *) echo "unrecognized command: $c" ; exit 1 ;;
    esac
  done
  #
  #	loop forever
  #
  while true ; do
	  #
  	#	relay stdin to stdout
  	#
    while true ; do
      IFS= read -r -t "$timeout" line; rc=$?
      if [ $rc != 0 ]; then break; fi
      # because otherwise we overwrite the time output, and that looks bad
      print_timeout
      echo "$line"
    done
  	#
  	#	exit status is greater than 128 if the timeout is exceeded
  	#
	  if [ $rc != $timeout_status ]; then break; fi

  	#
    #	print the timestamp
    #
    now=`date ${1:++"$1"}`
    echo -ne "$now\r" >&2
    did_timeout=1
  done

  # handle exiting the stream without printing the last newline
  print_timeout
}

main "$@"
