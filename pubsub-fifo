#!/usr/bin/python3

import argparse
import enum
import hashlib
import itertools
import logging
import os
import pathlib
import socket
import sys

from contextlib import closing

class SocketMode(enum.Enum):
  SUB = enum.auto()
  PUB = enum.auto()
  # bit of a hack to represent sockets we attempted to publish to,
  # but never actually managed to connect to.
  DISCONNECT = enum.auto()


class PubSubSocket:

  BUFFER_SIZE = 1024 * 8

  @staticmethod
  def create_subscriber(root_path):
    # The socket we are about to bind must only be accessible to our user.
    oldmask = os.umask(0o077)

    try:
      # Create directories as needed.
      root_path.mkdir(parents=True, exist_ok=True)

      receiver = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

      # Note that the OS protects us from file name collisions because it is
      # not possible to bind a to an existing file. That's why it's okay to
      # be using non-cryptographically secure hashing.
      #
      # So long as we mix in randomness we won't have linear collisions when
      # multiple programs attempt to create sockets in the same directory.

      # Use hashlib to generate file names.
      base_hash = hashlib.md5(str(root_path).encode())
      # Mix in randomness to avoid collisions. This should provide us with
      # 1 in 2 ** 64 odds of colliding with another socket name.
      base_hash.update(os.urandom(8))

      # until we find a free name, keep trying.
      while True:
        name = base_hash.hexdigest()[0:8]
        path_name = root_path.joinpath(name).with_suffix(".S")
        logging.info("subscribe: trying to use %s as socket name", str(path_name))
        try:
          receiver.bind(str(path_name))
          receiver.listen()
          return PubSubSocket(receiver, path_name, SocketMode.SUB)
        except OSError as e:
          logging.debug("subscribe: socket name collision")
          # add more randomness into the hash because we hit a collision.
          base_hash.update(os.urandom(8))
          pass
    finally:
      # reset umask
      os.umask(oldmask)

  @staticmethod
  def open_for_publish(path):
    try:
      publisher = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
      publisher.connect(str(path))
      return PubSubSocket(publisher, path, SocketMode.PUB)
    except ConnectionRefusedError:
      logging.debug("publish: path %s refused connection", str(path))
      # perfectly ok, nothing listening on the other end.
      return PubSubSocket(None, path, SocketMode.DISCONNECT)

  def __init__(self, socket, path, mode):
    self.socket = socket
    self.path = path
    self.mode = mode

  def close(self):
    logging.debug("closing socket %s", self.path)
    if self.socket:
      logging.debug("socket shutdown and closed")
      # unset if mode == DISCONNECT
      self.socket.shutdown(socket.SHUT_RDWR)
      self.socket.close()
    if self.mode == SocketMode.SUB:
      logging.debug("unlinking path: %s", self.path)
      # reader created the socket, so reader deletes it.
      self.path.unlink(missing_ok=True)

  def recv(self):
    assert self.mode == SocketMode.SUB
    socket, _ = self.socket.accept()
    try:
      logging.debug("subscribe: recv connected")
      return socket.recv(PubSubSocket.BUFFER_SIZE)
    finally:
      socket.close()

  def send(self, data):
    if self.mode == SocketMode.DISCONNECT:
      logging.debug("publish: send to disconnected socket: %s", self.path)
      return
    assert self.mode == SocketMode.PUB
    assert len(data) <= PubSubSocket.BUFFER_SIZE

    sent = self.socket.send(data)


def publish(root, topic, data):
  # iterate over all files in root looking for sockets.
  # connect to them and send them data.

  root = pathlib.Path(root).absolute()
  path = root.joinpath(topic)

  while path != root.parent:
    files = path.glob("*")
    for f in files:
      if not f.is_socket():
        continue
      logging.info("attempt sending to %s", f)

      with closing(PubSubSocket.open_for_publish(f)) as publisher:
        publisher.send(data)

    path = path.parent


def subscribe(root, topic, count, msg_func):

  path = pathlib.Path(root).joinpath(topic)

  with closing(PubSubSocket.create_subscriber(path)) as subscriber:

    while count is None or count > 0:
      if count is not None:
        count -= 1

      data = subscriber.recv()
      msg_func(data)


def stdin_data():
  yield sys.stdin.read()


def stdout_data(msg):
  sys.stdout.write(str(msg, 'utf8'))
  sys.stdout.flush()


def setup_logger(v, verbose):
  if v > 0 and verbose is not None:
    raise Exception("can't specify both -v and --verbose flags")

  if v > 3:
    v = 3

  # Fatal > Warning > Info > Debug
  log_map = {
    1: logging.WARN,
    2: logging.INFO,
    3: logging.DEBUG,

    'WARNING': logging.WARN,
    'WARN': logging.WARN,
    'INFO': logging.INFO,
    'DEBUG': logging.DEBUG,
  }

  # default logging is fatal.
  level = log_map.get(v or verbose, logging.CRITICAL)
  logging.basicConfig(level=level)


def main(args):
  setup_logger(args.v, args.verbose)    

  if args.command == "publish":
    publish(args.root, args.topic, sys.stdin.read().encode())
  elif args.command == "subscribe":
    if args.count and args.for_count:
      raise Exception("can only specify one of --count or --for-count")
    subscribe(args.root, args.topic, args.count or args.for_count, stdout_data)


def _parser():
  p = argparse.ArgumentParser()
  p.add_argument("-r", "--root", default="/tmp/pubsub-ipc/root/",
                 help="Root directory under which to bind unix sockets.")
  p.add_argument("-v", action='count', default=0)
  p.add_argument("--verbose", choices=['DEBUG', 'INFO', 'WARN', 'WARNING'], default=None)

  p2 = p.add_subparsers(dest='command', required=True)

  pub = p2.add_parser("publish")
  pub.add_argument("topic")

  sub = p2.add_parser("subscribe")
  sub.add_argument("topic")

  sub.add_argument("-c", "--count", type=int, default=None,
                   help="Number of messages to listen for (default=unlimited).")
  sub.add_argument("--for-count", type=int, default=None,
                   help="Legacy flag, prefer to use --count.")

  return p


if __name__ == "__main__":
  args = _parser().parse_args()

  main(args)
