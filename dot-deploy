#!/usr/bin/env python3

import argparse
from pathlib import Path
from socket import gethostname
import sys

MAP_FILE = "MAPPING"
HOST_PREFIX = "HOST-"


def map_line(line):
  try:
    source, target = line.strip().split(" -> ", 1)

    # Work around absolute file weirdness in pathlib
    if source.startswith("/"):
      source = "." + source
    if target.startswith("/"):
      target = "." + target

    if source.endswith("/") and not target.endswith("/"):
      raise Exception("Can not link directory to file: {}".format(line))

    # Can link file to directory, implies the name is kept
    if not source.endswith("/") and target.endswith("/"):
      *_, src_name = source.rsplit("/", 1)
      target = target + src_name

    return (source, target)
  except ValueError as e:
    raise Exception("Bad line, needs to contain ' -> ': {}".format(line)) from e


def load_map(mapping):
  directory = mapping.parent
  config = {}
  with mapping.open() as f:
    for line in f:
      line = line.strip()
      if not line:
        continue

      source, target = map_line(line)
      source = directory.joinpath(source)
      config[target] = source

  return config


def load_host_overlay(directory):
  m = directory.joinpath(MAP_FILE)
  if not m.exists():
    raise Exception("Host overlay missing {}".format(MAP_FILE))

  return load_map(m)


def load_configs(deploy_from):
  # Maps target -> source
  config = load_map(deploy_from.joinpath(MAP_FILE))
  host_overlays = {}

  for host in deploy_from.glob(HOST_PREFIX + "*"):
    name = host.name[len(HOST_PREFIX):]
    host_overlays[name] = load_host_overlay(host)

  return (config, host_overlays)


class Deployer:
  slots = ["from_root", "to_root", "dry_run"]
  def __init__(self, deploy_from_root, deploy_to_root, dry_run=True):
    self.from_root = Path(deploy_from_root or Path()).resolve()
    self.to_root = Path(deploy_to_root or Path().home()).resolve()
    self.dry_run = dry_run

  def run(self):
    config, overlays = load_configs(self.from_root)
    # Squash the host overlay into the config
    overlay = overlays.get(gethostname(), dict())
    for target in overlay:
      config[target] = overlay[target]

    for target, source in config.items():
      self.link(source, target)

  def same_file(self, source, dest):
    try:
      return dest.readlink().samefile(source)
    except (NotADirectoryError, FileNotFoundError):
      return False

  def link(self, source, target):
    source = self.from_root.joinpath(source)
    dest = self.to_root.joinpath(target)
    if not source.exists() and not self.dry_run:
      raise Exception("Source file does not exist: {}".format(source))

    # Make sure the parent directory exists.
    if not self.dry_run:
      dest.parent.mkdir(parents=True, exist_ok=True)

    # Path.exists returns false when the target of a symlink doesn't exist.
    if dest.exists() or dest.is_symlink():
      if not dest.is_symlink():
        print("Removing {}".format(dest))
        if not self.dry_run:
          dest.unlink()
      elif not self.same_file(source, dest):
        print("Bad link at {} points to {}".format(dest, dest.readlink()))
        print("Removing {}".format(dest))
        if not self.dry_run:
          dest.unlink()
      else:
        print("Already linked {}".format(dest))
        return

    print("Linking {} to {}".format(dest, source))
    if not self.dry_run:
      dest.symlink_to(source, target_is_directory=target.endswith("/"))


def parser():
  p = argparse.ArgumentParser()

  p.add_argument("-r", "--root", help="Root directory to deploy to.")
  p.add_argument("-c", "--config", help="Root directory of the config files.")
  p.add_argument("--dry-run", help="List changes that would be made.", default=False, action='store_true')
  p.add_argument("file", nargs="*", help="Configuration files to consume (default: stdin)")

  return p


def main():
  args = parser().parse_args()

  Deployer(args.config, args.root, dry_run=args.dry_run).run()


if __name__ == "__main__":
  main()
