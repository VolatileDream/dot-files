#!/usr/bin/env bash

usage() {
    echo "$0 is a small app to track time usage"
    echo " $0 create"
    echo "  creates a new instance"
    echo " $0 start <event>"
    echo "  starts tracking time taken for the event"
    echo " $0 stop <event>"
    echo "  stops tracking time taken for the event"
    echo " $0 list"
    echo "  lists every event ever used"
    echo " $0 open"
    echo "  lists all events that are currently being tracked"
    echo
    echo " --instance <directory>"
    echo "  sets the directory to use as the storage location"
}

main() {
    local cmd
    if [ $# -eq 0 ]; then
        cmd="open"
    else
        cmd="$1" ; shift
    fi

    declare -g INSTANCE="${COUNTER_CLOCK:-$HOME/.config/counter-clock/}"
    local index=0
    local -a ARGS=()

    while [ $# -gt 0 ]; do
        local next="$1" ; shift
        case "$next" in
            --instance|-i)
                INSTANCE="$1"
                shift
                ;;
            --help|-h)
                cmd="help"
                ;;
            -*)
                echo "unrecognized flag: $next"
                exit 1
                ;;
            *)
                ARGS[$index]="$next"
                index=$((index+1))
                ;;
        esac
    done

    local event="${ARGS[*]}"
    case "$cmd" in
        create)
            [ ! -d "$INSTANCE" ] && chronos init "$INSTANCE"
            echo "export COUNTER_CLOCK='$INSTANCE'"
            ;;
        start)
            if _is_open "$event" ; then
                echo "Can't start '$event' already open"
                exit 2
            else
                echo "+ $event" | chronos append "$INSTANCE"
            fi
            ;;
        stop)
            if ! _is_open "$event" ; then
                echo "Can't stop '$event' not open"
                exit 2
            else
                echo "- $event" | chronos append "$INSTANCE"
            fi
            ;;
        count)
            count
            ;;
        log)
            log
            ;;
        list)
            list
            ;;
        open)
            open
            ;;
        *)
            echo "'$cmd' not recognized" > /dev/stderr
            usage
            exit 1
            ;;
        help)
            usage
            ;;
    esac
}

_is_open() {
    if [ $# -lt 1 ] || [ -z "${1// }" ]; then
        echo "No event provided to is_open"
        exit 2
    fi
    open | grep -e "$1" > /dev/null 2> /dev/null
}

open() {
    read -d '' OPEN_SCRIPT <<- AWK_SCRIPT
        /^\\\\+/ { gsub("\\+ ", ""); vals[ \$0 ] += 1 }
        /^\\-/ { gsub("- ", ""); vals[ \$0 ] -= 1 }
        END {
            for ( v in vals ) {
                if ( vals[v] > 0 ) print v ;
            }
        }
AWK_SCRIPT
    chronos iterate "$INSTANCE" "%v" |
        awk "$OPEN_SCRIPT"
}

list() {
    chronos iterate "$INSTANCE" "%v" |
     cut -d ' ' -f 2- |
     sort -u
}

log() {
    chronos iterate "$INSTANCE" "%s %v" 
}

count() {
    log | sum
}

sum() {
    # Can't use AWK for non-trivial math, it uses floats.
    # Output as "$time -- $task" for easier scripting intake
    declare -A VALS=()
    declare -A LAST=()
    declare -A COUNTS=()
     while read time sign event; do
        case "$sign" in
            +) LAST[$event]=$time;;
            -)
                local prev="${LAST[$event]}"
                local delta=`diff_times ${time} ${prev}`
                VALS[$event]=`add_times ${VALS[$event]} ${delta}`
                COUNT[$event]=$(( COUNT[$event] + 1))
              ;;
        esac
     # funny redirect because of subshells. :/
     done
    for KEY in "${!VALS[@]}" ; do
        echo "${VALS[$KEY]} -- $KEY"
    done
}

diff_times() {
    declare first="$1"
    declare second="$2"

    declare seconds=$((${first%.*} - ${second%.*}))
    # Explicitly set base 10, because these have leading zeros.
    declare micros=$((10#${first#*.} - 10#${second#*.}))
    if [ $micros -lt 0 ]; then
        micros=$((micros+10**9))
        seconds=$((seconds-1))
    fi
    echo "${seconds}.${micros}"
}

add_times() {
    declare micros=0
    declare seconds=0

    while [ $# -gt 0 ]; do
        local time="$1" ; shift
        # Chronos guarantees zero padding
        micros=$((micros + 10#${time#*.}))
        seconds=$((seconds + ${time%.*}))
    done

    echo "$((seconds + micros / 10**9)).$((micros % 10**9))"
}

main "$@"
