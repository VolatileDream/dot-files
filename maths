#!/usr/bin/env python3

import argparse
import functools
import math
import sys

def create_parser():
  p = argparse.ArgumentParser()

  # Exclusive modes of operation
  p.add_argument("-s", "--sum", action="store_true", help="Computes sum")
  p.add_argument("-p", "--product", action="store_true", help="Computes product")
  p.add_argument("-c", "--count", action="store_true", help="Computes number of lines")
  p.add_argument("-a", "--average", action="store_true", help="Computes average")
  p.add_argument("-v", "--variance", action="store_true", help="Computes variance")
  p.add_argument("-m", "--min-max", action="store_true", help="Computes min & max values")

  p.add_argument("-t", "--terse", action="store_true", help="Terse output")
  return p


def lines():
  for line in sys.stdin:
    try:
      i = float(line)
      yield i
    except ValueError as e:
      print("bad line:", line, file=sys.stderr)


def stats(ins, args, printer):
  # Mostly from https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm
  # But found a useful explanation that is ellided from the wikipedia entry.
  # https://jonisalonen.com/2013/deriving-welfords-method-for-computing-variance/

  minv = None
  maxv = None

  sum = 0
  product = 1

  count = 0
  mean = 0
  variance = 0

  for i in ins:
    # Simple things
    sum += i
    product *= i
    if minv is None:
      minv = i
    else:
      minv = min(minv, i)
    if maxv is None:
      maxv = i
    else:
      maxv = max(maxv, i)

    # Interesting variance stuff.
    count += 1
    delta = i - mean
    mean += delta / count
    delta2 = i - mean  # yes, calculate new delta with the new mean.
    variance += delta * delta2

  # Done looping, do cleanup & print output.
  if count < 2:
    variance = float("nan")

  if args.min_max:
    printer("min =", minv)
    printer("max =", maxv)
  if args.count:
    printer("count =",count)
  if args.sum:
    printer("sum =",sum)
  if args.product:
    printer("product =",product)
  if args.average:
    printer("average =",mean)
  if args.variance:
    printer("variance =", math.sqrt(variance / (count - 1)))


def terse_print(name, value):
  print(value)


if __name__ == "__main__":

  args = create_parser().parse_args()
  printer = print
  if args.terse:
    printer = terse_print

  r = stats(lines(), args, printer)
  if r is not None:
    sys.exit(r)

