#!/usr/bin/env python3

import argparse
import functools
import math
import sys

def create_parser():
  p = argparse.ArgumentParser()

  # Exclusive modes of operation
  g = p.add_mutually_exclusive_group(required=True)
  g.add_argument("-s", "--sum", action="store_true", help="Computes sum")
  g.add_argument("-p", "--product", action="store_true", help="Computes product")
  g.add_argument("-c", "--count", action="store_true", help="Computes number of lines")
  g.add_argument("-a", "--average", action="store_true", help="Computes average")
  g.add_argument("-v", "--variance", action="store_true", help="Computes variance, requires --expected-average, ")

  # Parameters for the various modes
  p.add_argument("--expected-average", type=float,
      help="Sets the expected average, used to compute one pass variance.")
  p.add_argument("--average-threshold", type=float, default=1.0,
      help="Allowed difference between computed average and --expected-average value.")
  return p


def lines():
  for line in sys.stdin:
    try:
      i = float(line)
      yield i
    except ValueError as e:
      print("bad line:", line, file=sys.stderr)


def sum(ins, args=None):
  total = 0
  for i in ins:
    total += i
  print(total)


def product(ins, args=None):
  p = 1
  for i in ins:
    p *= i
  print(p)


def stats(ins, args=None):
  # Mostly from https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm
  # But found a useful explanation that is ellided from the wikipedia entry.
  # https://jonisalonen.com/2013/deriving-welfords-method-for-computing-variance/

  count = 0
  mean = 0
  variance = 0

  for i in ins:
    count += 1
    delta = i - mean
    mean += delta / count
    delta2 = i - mean  # yes, calculate new delta with the new mean.
    variance += delta * delta2

  if count < 2:
    variance = float("nan")

  if args.average:
    print(mean)
  elif args.variance:
    print(math.sqrt(variance / (count - 1)))
  elif args.count:
    print(count)


if __name__ == "__main__":

  args = create_parser().parse_args()

  fn = None
  if args.sum:
    fn = sum
  elif args.product:
    fn = product
  elif args.count:
    fn = stats
  elif args.average:
    fn = stats
  elif args.variance:
    fn = stats

  r = fn(lines(), args=args)
  if r is not None:
    sys.exit(r)

