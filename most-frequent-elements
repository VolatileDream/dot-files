#!/usr/bin/env python3

import argparse
import collections
import sys

# https://en.wikipedia.org/wiki/Misra%E2%80%93Gries_summary
class FrequencyAnalysis:
  @staticmethod
  def from_args(fraction):
    return FrequencyAnalysis(fraction)

  @staticmethod
  def load(filename):
    with open(filename) as f:
      items = {}
      fraction = int(f.readline().strip())
      for line in f:
        count, value = line.strip().split(":", maxsplit=1)
        items[value] = int(count)

      return FrequencyAnalysis(fraction, items)

  def save(self, filename):
    with open(filename, mode='w') as f:
      f.write("{}\n".format(self.fraction))
      for value, count in self.items.items():
        f.write("{}:{}\n".format(count, value))

  def __init__(self, fraction, values=None):
    self.items = collections.defaultdict(int)
    self.fraction = fraction

    if values:
      self.__add_values(values)

  def __add_values(self, values):
    if len(values) > self.fraction:
      raise Exception("Too many values provided for fraction size")
    if type(values) == dict:
      for value, count in values.items():
        self.items[value] = count
    elif type(values) == list:
      for v in values:
        self.add(v)
    else:
      raise Exception("Unsupported values type {}".format(type(values)))

  def elements(self):
    """Returns the items in the frequency analysis, most occuring first.

    Items are (string, approx count).
    """
    items = list(self.items.items())
    items.sort(key=lambda x: x[1], reverse=True)
    return items

  def add(self, key):
    if key in self.items.keys() or len(self.items) < self.fraction:
      self.items[key] += 1
    else:
      for k in set(self.items.keys()):
        self.items[k] -= 1
        if self.items[k] <= 0:
          del self.items[k]

  def validate(self):
    return FrequencyAnalysisValidator(self)


class FrequencyAnalysisValidator:
  def __init__(self, freq):
    self.items = dict(freq.items)
    for k in self.items.keys():
      self.items[k] = 0

  def add(self, key):
    if key in self.items:
      self.items[key] += 1

  def elements(self):
    """Returns the items in the frequency analysis, most occuring first.

    Items are (string, approx count).
    """
    items = list(self.items.items())
    items.sort(key=lambda x: x[1], reverse=True)
    return items


def parser():
  p = argparse.ArgumentParser()

  p.add_argument("-t", "--top", help="Number of elements to output, defaults to 1.", default=1, type=int)
  p.add_argument("-v", "--validate", action='store_true', default=False,
                 help="Run in validation mode, requires -l, incompatible with -f")
  p.add_argument("-f", "--fraction", help="Minimum fraction for correct results, default=100", default=100, type=int)
  p.add_argument("-l", "--load", help="Load frequency file.")
  p.add_argument("-s", "--save", help="Save results to file.")

  return p


def main():
  args = parser().parse_args()

  if args.top > args.fraction:
    raise Exception("Can not specify --top larger than --fraction")

  freq = None
  if args.load:
    freq = FrequencyAnalysis.load(args.load)
  else:
    freq = FrequencyAnalysis.from_args(args.fraction)

  if args.validate:
    if not args.load:
      raise Exception("Can not run validation unless loading from file, did you forget to pass --load?")
    freq = freq.validate()

  for line in sys.stdin:
    freq.add(line.rstrip())
  for i in freq.elements()[:args.top]:
    print(i[1], i[0])

  if args.save and not args.validate:
    freq.save(args.save)


if __name__ == "__main__":
  main()
